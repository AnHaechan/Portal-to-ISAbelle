[{"observation": "proof (prove)\ngoal (1 subgoal):\n 1. dfs2 g xs ys = dfs g xs ys", "extra context": "lemma \"dfs2 g xs ys = dfs g xs ys\"", "action": "by (induct g xs ys rule: dfs2.induct) (auto simp add: dfs_app)", "complete": true}]
[{"observation": "proof (prove)\ngoal (1 subgoal):\n 1. (y \\<in> set (nexts g x)) = ((x, y) \\<in> set g)", "extra context": "lemma nexts_set: \"y \\<in> set (nexts g x) = ((x,y) \\<in> set g)\"", "action": "by (induct g) auto", "complete": true}]
[{"observation": "proof (prove)\ngoal (1 subgoal):\n 1. size (del_min t) = size t - 1", "extra context": "lemma size_del_min: assumes \"braun t\" shows \"size(del_min t) = size t - 1\"", "action": "proof(cases t rule: del_min.cases)", "complete": false}, {"observation": "proof (state)\ngoal (3 subgoals):\n 1. t = \\<langle>\\<rangle> \\<Longrightarrow> size (del_min t) = size t - 1\n 2. \\<And>x r.\n       t = \\<langle>\\<langle>\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1\n 3. \\<And>v va vb x r.\n       t =\n       \\<langle>\\<langle>v, va, vb\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1", "extra context": "lemma size_del_min: assumes \"braun t\" shows \"size(del_min t) = size t - 1\" \\n proof(cases t rule: del_min.cases)", "action": "case [simp]: (3 ll b lr a r)", "complete": false}, {"observation": "proof (state)\nthis:\n  t = \\<langle>\\<langle>ll, b, lr\\<rangle>, a, r\\<rangle>\n\ngoal (3 subgoals):\n 1. t = \\<langle>\\<rangle> \\<Longrightarrow> size (del_min t) = size t - 1\n 2. \\<And>x r.\n       t = \\<langle>\\<langle>\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1\n 3. \\<And>v va vb x r.\n       t =\n       \\<langle>\\<langle>v, va, vb\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1", "extra context": "lemma size_del_min: assumes \"braun t\" shows \"size(del_min t) = size t - 1\" \\n proof(cases t rule: del_min.cases) \\n case [simp]: (3 ll b lr a r)", "action": "{", "complete": false}, {"observation": "proof (state)\nthis:\n  t = \\<langle>\\<langle>ll, b, lr\\<rangle>, a, r\\<rangle>\n\ngoal (3 subgoals):\n 1. t = \\<langle>\\<rangle> \\<Longrightarrow> size (del_min t) = size t - 1\n 2. \\<And>x r.\n       t = \\<langle>\\<langle>\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1\n 3. \\<And>v va vb x r.\n       t =\n       \\<langle>\\<langle>v, va, vb\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1", "extra context": "lemma size_del_min: assumes \"braun t\" shows \"size(del_min t) = size t - 1\" \\n proof(cases t rule: del_min.cases) \\n case [simp]: (3 ll b lr a r) \\n {", "action": "fix y l'", "complete": false}, {"observation": "proof (state)\ngoal (3 subgoals):\n 1. t = \\<langle>\\<rangle> \\<Longrightarrow> size (del_min t) = size t - 1\n 2. \\<And>x r.\n       t = \\<langle>\\<langle>\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1\n 3. \\<And>v va vb x r.\n       t =\n       \\<langle>\\<langle>v, va, vb\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1", "extra context": "lemma size_del_min: assumes \"braun t\" shows \"size(del_min t) = size t - 1\" \\n proof(cases t rule: del_min.cases) \\n case [simp]: (3 ll b lr a r) \\n { \\n fix y l'", "action": "assume \"del_left (Node ll b lr) = (y,l')\"", "complete": false}, {"observation": "proof (state)\nthis:\n  del_left \\<langle>ll, b, lr\\<rangle> = (y, l')\n\ngoal (3 subgoals):\n 1. t = \\<langle>\\<rangle> \\<Longrightarrow> size (del_min t) = size t - 1\n 2. \\<And>x r.\n       t = \\<langle>\\<langle>\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1\n 3. \\<And>v va vb x r.\n       t =\n       \\<langle>\\<langle>v, va, vb\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1", "extra context": "lemma size_del_min: assumes \"braun t\" shows \"size(del_min t) = size t - 1\" \\n proof(cases t rule: del_min.cases) \\n case [simp]: (3 ll b lr a r) \\n { \\n fix y l' \\n assume \"del_left (Node ll b lr) = (y,l')\"", "action": "hence \"size(sift_down r y l') = size t - 1\"", "complete": false}, {"observation": "proof (prove)\nusing this:\n  del_left \\<langle>ll, b, lr\\<rangle> = (y, l')\n\ngoal (1 subgoal):\n 1. size (sift_down r y l') = size t - 1", "extra context": "lemma size_del_min: assumes \"braun t\" shows \"size(del_min t) = size t - 1\" \\n proof(cases t rule: del_min.cases) \\n case [simp]: (3 ll b lr a r) \\n { \\n fix y l' \\n assume \"del_left (Node ll b lr) = (y,l')\" \\n hence \"size(sift_down r y l') = size t - 1\"", "action": "using assms", "complete": false}, {"observation": "proof (prove)\nusing this:\n  del_left \\<langle>ll, b, lr\\<rangle> = (y, l')\n  braun t\n\ngoal (1 subgoal):\n 1. size (sift_down r y l') = size t - 1", "extra context": "lemma size_del_min: assumes \"braun t\" shows \"size(del_min t) = size t - 1\" \\n proof(cases t rule: del_min.cases) \\n case [simp]: (3 ll b lr a r) \\n { \\n fix y l' \\n assume \"del_left (Node ll b lr) = (y,l')\" \\n hence \"size(sift_down r y l') = size t - 1\" \\n using assms", "action": "by(subst size_sift_down) (auto dest: del_left_size del_left_braun)", "complete": false}, {"observation": "proof (state)\nthis:\n  size (sift_down r y l') = size t - 1\n\ngoal (3 subgoals):\n 1. t = \\<langle>\\<rangle> \\<Longrightarrow> size (del_min t) = size t - 1\n 2. \\<And>x r.\n       t = \\<langle>\\<langle>\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1\n 3. \\<And>v va vb x r.\n       t =\n       \\<langle>\\<langle>v, va, vb\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1", "extra context": "lemma size_del_min: assumes \"braun t\" shows \"size(del_min t) = size t - 1\" \\n proof(cases t rule: del_min.cases) \\n case [simp]: (3 ll b lr a r) \\n { \\n fix y l' \\n assume \"del_left (Node ll b lr) = (y,l')\" \\n hence \"size(sift_down r y l') = size t - 1\" \\n using assms \\n by(subst size_sift_down) (auto dest: del_left_size del_left_braun)", "action": "}", "complete": false}, {"observation": "proof (state)\nthis:\n  del_left \\<langle>ll, b, lr\\<rangle> = (?y2, ?l'2) \\<Longrightarrow>\n  size (sift_down r ?y2 ?l'2) = size t - 1\n\ngoal (3 subgoals):\n 1. t = \\<langle>\\<rangle> \\<Longrightarrow> size (del_min t) = size t - 1\n 2. \\<And>x r.\n       t = \\<langle>\\<langle>\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1\n 3. \\<And>v va vb x r.\n       t =\n       \\<langle>\\<langle>v, va, vb\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1", "extra context": "lemma size_del_min: assumes \"braun t\" shows \"size(del_min t) = size t - 1\" \\n proof(cases t rule: del_min.cases) \\n case [simp]: (3 ll b lr a r) \\n { \\n fix y l' \\n assume \"del_left (Node ll b lr) = (y,l')\" \\n hence \"size(sift_down r y l') = size t - 1\" \\n using assms \\n by(subst size_sift_down) (auto dest: del_left_size del_left_braun) \\n }", "action": "thus ?thesis", "complete": false}, {"observation": "proof (prove)\nusing this:\n  del_left \\<langle>ll, b, lr\\<rangle> = (?y2, ?l'2) \\<Longrightarrow>\n  size (sift_down r ?y2 ?l'2) = size t - 1\n\ngoal (1 subgoal):\n 1. size (del_min t) = size t - 1", "extra context": "lemma size_del_min: assumes \"braun t\" shows \"size(del_min t) = size t - 1\" \\n proof(cases t rule: del_min.cases) \\n case [simp]: (3 ll b lr a r) \\n { \\n fix y l' \\n assume \"del_left (Node ll b lr) = (y,l')\" \\n hence \"size(sift_down r y l') = size t - 1\" \\n using assms \\n by(subst size_sift_down) (auto dest: del_left_size del_left_braun) \\n } \\n thus ?thesis", "action": "by(auto split: prod.split)", "complete": false}, {"observation": "proof (state)\nthis:\n  size (del_min t) = size t - 1\n\ngoal (2 subgoals):\n 1. t = \\<langle>\\<rangle> \\<Longrightarrow> size (del_min t) = size t - 1\n 2. \\<And>x r.\n       t = \\<langle>\\<langle>\\<rangle>, x, r\\<rangle> \\<Longrightarrow>\n       size (del_min t) = size t - 1", "extra context": "lemma size_del_min: assumes \"braun t\" shows \"size(del_min t) = size t - 1\" \\n proof(cases t rule: del_min.cases) \\n case [simp]: (3 ll b lr a r) \\n { \\n fix y l' \\n assume \"del_left (Node ll b lr) = (y,l')\" \\n hence \"size(sift_down r y l') = size t - 1\" \\n using assms \\n by(subst size_sift_down) (auto dest: del_left_size del_left_braun) \\n } \\n thus ?thesis \\n by(auto split: prod.split)", "action": "qed (insert assms, auto)", "complete": true}]
[{"observation": "proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>del_left t = (x, t'); t \\<noteq> \\<langle>\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> x \\<in># mset_tree t \\<and>\n                      mset_tree t' = mset_tree t - {#x#}", "extra context": "lemma del_left_mset:\n  \"del_left t = (x,t') \\<Longrightarrow> t \\<noteq> Leaf\n  \\<Longrightarrow> x \\<in># mset_tree t \\<and> mset_tree t' = mset_tree t - {#x#}\"", "action": "by (simp add: del_left_mset_plus)", "complete": true}]
[{"observation": "proof (prove)\ngoal (1 subgoal):\n 1. braun t \\<Longrightarrow>\n    t_list_of_B t\n    \\<le> 3 * (nat \\<lceil>log 2 (real (size t + 1))\\<rceil> + 1) * size t", "extra context": "lemma t_list_of_B_log_bound:\n  \"braun t \\<Longrightarrow> t_list_of_B t \\<le> 3 * (nlog2 (size t + 1) + 1) * size t\"", "action": "apply (frule t_list_of_B_bound)", "complete": false}, {"observation": "proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>braun t;\n     t_list_of_B t \\<le> 3 * (height t + 1) * size t\\<rbrakk>\n    \\<Longrightarrow> t_list_of_B t\n                      \\<le> 3 *\n                            (nat \\<lceil>log 2 (real (size t + 1))\\<rceil> +\n                             1) *\n                            size t", "extra context": "lemma t_list_of_B_log_bound:\n  \"braun t \\<Longrightarrow> t_list_of_B t \\<le> 3 * (nlog2 (size t + 1) + 1) * size t\" \\n apply (frule t_list_of_B_bound)", "action": "apply (simp add: height_acomplete acomplete_if_braun size1_size)", "complete": false}, {"observation": "proof (prove)\ngoal:\nNo subgoals!", "extra context": "lemma t_list_of_B_log_bound:\n  \"braun t \\<Longrightarrow> t_list_of_B t \\<le> 3 * (nlog2 (size t + 1) + 1) * size t\" \\n apply (frule t_list_of_B_bound) \\n apply (simp add: height_acomplete acomplete_if_braun size1_size)", "action": "done", "complete": true}]
